@startuml
class SolarSystem {
    +__init__(window_manager: Any, gui_manager: Any)
    +set_gui_manager(): None
    +handle_event(event: Any, t: Any): None
    +compute_ray_from_mouse(mouse_pos: Any): Any
    +intersects_sphere(ray_origin: Any, ray_direction: Any, sphere_center: Any, sphere_radius: Any): None
    +world_to_screen(x: Any, y: Any, z: Any): Any
    +pick_planet(mouse_pos: Any, t: Any): None
    +draw_body(body: Any, t: Any, color: Any): None
    +draw_ring(body_radius: Any): None
    +load_skybox_texture(texture_path: Any): Any
    +draw_skybox(texture_id: Any): None
    +render_ui(): None
    +get_selected_planet(): Any
    +is_infobox_visible(): bool
    +get_clicked_mouse_position(): Any
    +window: WindowManager
    +interactions: UserInteractions
    +clicked_mouse_position: Any
    +skybox_texture_id: Any
    +space_bodies: list[SpaceBody]
    +selected_planet: None
    +infobox_visible: bool
    +gui_manager: Any
}
WindowManager "1 " --o SolarSystem
UserInteractions "1 " --o SolarSystem
GuiManager "1   " --o SolarSystem
DateManager "1   " --o SolarSystem

class UserInteractions {
    +__init__(window_manager: Any, gui_manager: Any)
    +handle_event(event: Any, resize: Any): None
    +get_camera_position(): tuple[Any]
    +get_camera_distance(): float
    +center_camera(): None

    +gui_manager: Any
    +window_manager: Any
    +screen: Surface
    +skybox_eigth_size: float
    +LINEAR_ZOOM_AMOUNT: float
    +dragging: bool
    +last_mouse_x: Any
    +last_mouse_y: Any
    +INITIAL_CAMERA_DISTANCE: float
    +CAMERA_DISTANCE: float
    +MIN_ZOOM_IN: float
    +MAX_ZOOM_OUT: float
    
}

class GuiManager {
    +__init__()
    +setup_imgui(): PyGameRenderer
    +start_frame(screen: Any): None
    +end_frame(): None
    +render_ui(solar_system: Any, date_manager: Any, user_interactions: Any): None
    +process_event(event: Any): None
    +render_infobox(solar_system: Any): None
    +setup_infobox_position(solar_system: Any): tuple[Any]
    +render_labels(body: Any, t: Any): None
    +calculate_label_position(body: Any, t: Any): tuple[Any]
    +render_label_for_body(body: Any, label_x: Any, label_y: Any): None
    +render_label_toggle_button(): None
    +render_date_selector(date_manager: Any): None
    +set_date_selector_window_position(): None
    +set_date_selector_style(): None
    +begin_date_selector_window(): None
    +render_input_date_toggle_button(): None
    +render_separator(): None
    +render_date_input_fields(date_manager: Any): None
    +render_date_inputs(): None
    +render_input_field(label: Any, value: Any, width: Any, buffer_size: Any, separator: Any): None
    +render_confirm_button(date_manager: Any): None
    +render_reset_button(date_manager: Any): None
    +reset_to_current_date(date_manager: Any): None
    +display_error_message(): None
    +end_date_selector_window(): None
    +reset_style(): None
    +set_center_button_window_position(): None
    +begin_center_button(): None
    +render_center_button(user_interactions: Any): None
    +handle_date_confirmation(date_manager: Any): None
    +is_valid_date(year: Any, month: Any, day: Any): bool
    +get_infobox_attributes(solar_system: Any): list[str]
    +render_infobox_content(attributes: list[str]): None
    +handle_resize(width: Any, height: Any): None

    +renderer: PyGameRenderer
    +error_message: str
    +error_display_time: float
    +show_date_input: bool
    +date_input: dict[str]
    +show_labels: bool
    
}

class WindowManager {
    +__init__()
    +resize(width: Any, height: Any): None
    +get_current_dimensions(): Any

    +screen: Surface
    +WIDTH: Any
    +HEIGHT: Any

}

class DateManager {
    +__init__()
    +set_date(month: Any, day: Any, year: Any): None
    +get_current_date(): Time

    +ts: Timescale
    +current_date: Time
}

class SpaceBody {
    +__init__(radius: Any, color: Any, skyfield_name: Any, data_url: Any, orbital_center: None, 
    {method} name: str, description: str, orbital_period: str, distance_from_sun: str, 
    {method} mass: str, diameter: str, gravity: str, avg_temperature: str, age: str, orbit_distance: str)
    +compute_position(t: Any): tuple[Any]

    +radius: Any
    +color: Any
    +skyfield_name: Any
    +data_url: Any
    +name: str
    +mass: str
    +diameter: str
    +avg_temperature: str
    +gravity: str
    +description: str
    +age: str
    +orbital_center: str
    +orbital_period: str
    +distance_from_sun: str
    +orbit_distance: str
    +ts: Timescale
    +ephemeris: NDArray[]
    +body: NDArray[]
    
}
SolarSystem o-- "1 of each   " Bodies 

package "Bodies" {

    class Earth {}

    class Jupiter {}

    class Mars {}

    class Mercury {}

    class Moon {}

    class Neptune {}

    class Pluto {}

    class Saturn {}

    class Sun {}

    class Uranus {}

    class Venus {}

    class Pluto {}

    class Ariel {}

    class Callisto {}

    class Deimos {}

    class Europa {}

    class Ganymede {}

    class Iapetus {}

    class Io {}

    class Oberon {}

    class Phobos {}

    class Rhea {}

    class Titan {}

    class Titania {}

    class Umbriel {}

    class Hygiea {}

    class Pallas {}

    class Vesta {}

    class Ceres {}

    class Eris {}

    class Sedna {}
}

SpaceBody <|-- Bodies
@enduml